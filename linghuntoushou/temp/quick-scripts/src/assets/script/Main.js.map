{"version":3,"sources":["assets\\script\\Main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+BAA0B;AAC1B,mCAA8B;AAC9B,0CAAyC;AACzC,0CAAqC;AAG/B,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAkC,wBAAY;IAA9C;;IA8BA,CAAC;IA3Ba,qBAAM,GAAhB;QACI,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAEa,mBAAI,GAAlB;;;;4BACI,qBAAM,IAAI,CAAC,UAAU,EAAE,EAAA;;wBAAvB,SAAuB,CAAC;wBACxB,EAAE,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;wBAC/C,EAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;wBACjD,sDAAsD;wBACtD,6DAA6D;wBAC7D,mEAAmE;wBACnE,gBAAM,CAAC,GAAG,CAAC,cAAI,CAAC,CAAC,IAAI,EAAE,CAAC;wBACxB,gBAAM,CAAC,GAAG,CAAC,gBAAM,CAAC,CAAC,IAAI,EAAE,CAAC;;;;;KAE7B;IAEO,yBAAU,GAAlB;QACI,OAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;YACrC,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,eAAM,CAAC,gBAAgB,EAAE,UAAC,GAAG,EAAE,MAAM;gBAC5D,IAAI,CAAC,GAAG,EAAE;oBACN,OAAO,EAAE,CAAC;iBACb;qBAAM;oBACH,MAAM,EAAE,CAAC;iBACZ;YACL,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IACN,CAAC;IA7BgB,IAAI;QADxB,OAAO;OACa,IAAI,CA8BxB;IAAD,WAAC;CA9BD,AA8BC,CA9BiC,EAAE,CAAC,SAAS,GA8B7C;kBA9BoB,IAAI","file":"","sourceRoot":"/","sourcesContent":["import Game from \"./Game\";\r\nimport Launch from \"./Launch\";\r\nimport { GConst } from \"./common/Global\";\r\nimport Module from \"./common/Module\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Main extends cc.Component {\r\n\r\n\r\n    protected onLoad(): void {\r\n        this.init();\r\n    }\r\n\r\n    private async init() {\r\n        await this.loadBundle();\r\n        cc.director.getPhysicsManager().enabled = true;\r\n        cc.director.getCollisionManager().enabled = true;\r\n        // cc.director.getPhysicsManager().debugDrawFlags = 1;\r\n        // cc.director.getCollisionManager().enabledDebugDraw = true;\r\n        // cc.director.getCollisionManager().enabledDrawBoundingBox = true;\r\n        Module.get(Game).hide();\r\n        Module.get(Launch).show();\r\n\r\n    }\r\n\r\n    private loadBundle() {\r\n        return new Promise<void>((resolve, reject) => {\r\n            cc.assetManager.loadBundle(GConst.customCompBundle, (err, bundle) => {\r\n                if (!err) {\r\n                    resolve();\r\n                } else {\r\n                    reject();\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\n"]}