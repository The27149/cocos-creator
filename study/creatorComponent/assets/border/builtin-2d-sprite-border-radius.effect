// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  void main () {

    float r1 = 0.1;
    vec2 o1 = vec2(0, 0);
    o1.x += r1;
    o1.y += r1;
    float len1 = distance(o1, v_uv0);
    if(v_uv0.x < o1.x && v_uv0.y < o1.y && len1 > r1) discard;

    float r2 = 0.1;
    vec2 o2 = vec2(1, 0);
    o2.x -= r2;
    o2.y += r2;
    float len2 = distance(o2, v_uv0);
    if(v_uv0.x > o2.x && v_uv0.y < o2.y && len2 > r2) discard;

    float r3 = 0.1;
    vec2 o3 = vec2(1, 1);
    o3.x -= r3;
    o3.y -= r3;
    float len3 = distance(o3, v_uv0);
    if(v_uv0.x > o3.x && v_uv0.y > o3.y && len3 > r3) discard;

    float r4 = 0.1;
    vec2 o4 = vec2(0, 1);
    o4.x += r4;
    o4.y -= r4;
    float len4 = distance(o4, v_uv0);
    if(v_uv0.x < o4.x && v_uv0.y > o4.y && len4 > r4) discard;


    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
