{
  "ver": "1.0.27",
  "uuid": "d651db33-2f0d-49ca-8d37-2eab856b67cf",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  float r1 = 0.1;\n  vec2 o1 = vec2(0, 0);\n  o1.x += r1;\n  o1.y += r1;\n  float len1 = distance(o1, v_uv0);\n  if(v_uv0.x < o1.x && v_uv0.y < o1.y && len1 > r1) discard;\n  float r2 = 0.1;\n  vec2 o2 = vec2(1, 0);\n  o2.x -= r2;\n  o2.y += r2;\n  float len2 = distance(o2, v_uv0);\n  if(v_uv0.x > o2.x && v_uv0.y < o2.y && len2 > r2) discard;\n  float r3 = 0.1;\n  vec2 o3 = vec2(1, 1);\n  o3.x -= r3;\n  o3.y -= r3;\n  float len3 = distance(o3, v_uv0);\n  if(v_uv0.x > o3.x && v_uv0.y > o3.y && len3 > r3) discard;\n  float r4 = 0.1;\n  vec2 o4 = vec2(0, 1);\n  o4.x += r4;\n  o4.y -= r4;\n  float len4 = distance(o4, v_uv0);\n  if(v_uv0.x < o4.x && v_uv0.y > o4.y && len4 > r4) discard;\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  float r1 = 0.1;\n  vec2 o1 = vec2(0, 0);\n  o1.x += r1;\n  o1.y += r1;\n  float len1 = distance(o1, v_uv0);\n  if(v_uv0.x < o1.x && v_uv0.y < o1.y && len1 > r1) discard;\n  float r2 = 0.1;\n  vec2 o2 = vec2(1, 0);\n  o2.x -= r2;\n  o2.y += r2;\n  float len2 = distance(o2, v_uv0);\n  if(v_uv0.x > o2.x && v_uv0.y < o2.y && len2 > r2) discard;\n  float r3 = 0.1;\n  vec2 o3 = vec2(1, 1);\n  o3.x -= r3;\n  o3.y -= r3;\n  float len3 = distance(o3, v_uv0);\n  if(v_uv0.x > o3.x && v_uv0.y > o3.y && len3 > r3) discard;\n  float r4 = 0.1;\n  vec2 o4 = vec2(0, 1);\n  o4.x += r4;\n  o4.y -= r4;\n  float len4 = distance(o4, v_uv0);\n  if(v_uv0.x < o4.x && v_uv0.y > o4.y && len4 > r4) discard;\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}