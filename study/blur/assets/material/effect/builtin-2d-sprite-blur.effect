// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        pos: { value: [0.5, 0.5, 0.25, 1.0]}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  uniform circle{
    vec4  pos;
  };

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif



  void main () {
    vec4 o = vec4(0, 0, 0, 0);
    bool isBlur = true;
    // bool isBlur = length(v_uv0.x - 0.5, v_uv0.y - 0.5) < 0.25;
    

    #if USE_TEXTURE

      if(isBlur){
        float _BlurOffsetX =0.002;
        float _BlurOffsetY =0.002;
        vec4 color;
        for(int i = -2; i <= 2; i++){
          for(int j = -2; j <= 2; j++){
            color= texture(texture, v_uv0 + vec2(float(i) * _BlurOffsetX, float(j) * _BlurOffsetY));
            o+= color;
          }
        }
        o /= float(25);
      }else{
        o += texture(texture, v_uv0);
      }
    #endif

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
